/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basics;
import java.util.Random;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
public class App {

    public static void main(String[] args) {

        int dogCount = 1;
        System.out.println("I own " + dogCount + " " + pluralize("dog", dogCount) + ".");

        int catCount = 2;
        System.out.println("I own " + catCount + " " + pluralize("cat", catCount) + ".");

        int turtleCount = 0;
        System.out.println("I own " + turtleCount + " " + pluralize("turtle", turtleCount) + ".");

        flipNHeads(1);
        clock();
    }

    public static String pluralize(String animalName, int animalNum) {
        if (animalNum > 1 || animalNum == 0) {
            return animalName + "s";
        } else {
            return animalName;
        }
    }
    public static void flipNHeads(int flipNum) {
        Random rand = new Random();
        float headTail;
        int headNumber = 0;
        int trailNumber = 0;

        while (headNumber != flipNum) {
            headTail = rand.nextFloat();

            if (headTail >= 0.5) {
                System.out.println("heads");
                headNumber = headNumber + 1;
                trailNumber = trailNumber + 1;
            } else {
                System.out.println("tails");
                headNumber = 0;
                trailNumber = trailNumber + 1;
            }
        }
        System.out.println("It took " + trailNumber + " "  + " to flip " + headNumber + " head in a row.");

    }
    public static void clock() {
        LocalDateTime now = LocalDateTime.now();
        int hour = now.getHour();
        int minute = now.getMinute();
        int second = now.getSecond();

        try {
            while (true) {
                now=LocalDateTime.now();
                hour = now.getHour();
                minute = now.getMinute();
                second=now.getSecond();
                System.out.println(hour+":"+minute+":"+second);
                Thread.sleep(1000);
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

    }

    }






